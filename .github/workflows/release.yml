name: üöÄ Release Build & Distribution

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true
  JAVA_VERSION: '17'
  VERSION_NAME: ${{ github.event.inputs.version_name || github.ref_name }}

jobs:
  # ============================================================================
  # PRE-RELEASE VALIDATION
  # ============================================================================

  pre-release-validation:
    name: üîç Pre-Release Validation
    runs-on: ubuntu-latest

    outputs:
      version-name: ${{ steps.version.outputs.version-name }}
      version-code: ${{ steps.version.outputs.version-code }}
      is-pre-release: ${{ steps.version.outputs.is-pre-release }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚òï Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: üìã Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: üéØ Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: üîß Grant Execute Permission to Gradlew
        run: chmod +x gradlew

      - name: üè∑Ô∏è Extract Version Information
        id: version
        run: |
          # Extract version from tag or input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_NAME="${{ github.event.inputs.version_name }}"
            IS_PRE_RELEASE="${{ github.event.inputs.pre_release }}"
          else
            VERSION_NAME="${GITHUB_REF#refs/tags/}"
            # Check if it's a pre-release (contains alpha, beta, rc, or has 4th component)
            if [[ "$VERSION_NAME" =~ (alpha|beta|rc) ]] || [[ $(echo "$VERSION_NAME" | tr -cd '.' | wc -c) -gt 2 ]]; then
              IS_PRE_RELEASE="true"
            else
              IS_PRE_RELEASE="false"
            fi
          fi

          # Generate version code (timestamp-based for uniqueness)
          VERSION_CODE=$(date +%s)

          echo "version-name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version-code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "is-pre-release=$IS_PRE_RELEASE" >> $GITHUB_OUTPUT

          echo "üìã Release Information:" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version Name | $VERSION_NAME |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Code | $VERSION_CODE |" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-release | $IS_PRE_RELEASE |" >> $GITHUB_STEP_SUMMARY

      - name: üß™ Run Critical Tests
        run: |
          echo "üß™ Running critical tests before release..."
          ./gradlew testDebugUnitTest --continue

      - name: üè• Medical Standards Validation
        run: |
          echo "üè• Validating medical compliance for release..."

          # Ensure critical medical components are present
          if ! grep -r "BristolStoolChart\|FODMAPAnalyzer\|CorrelationEngine" app/src/main/java/ >/dev/null 2>&1; then
            echo "‚ùå Critical medical components missing"
            exit 1
          fi

          echo "‚úÖ Medical components validated"

      - name: üîí Security Pre-flight Check
        run: |
          echo "üîí Running security checks..."

          # Check for debug keys or test certificates
          if grep -r "debug\|test" app/src/main/ --include="*.keystore" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Debug certificates detected - review before release"
          fi

          # Ensure no hardcoded secrets
          if grep -r "password\|secret\|key" app/src/main/java/ --exclude="*.md" | grep -v "//"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets detected - manual review required"
          fi

  # ============================================================================
  # BUILD RELEASE APK
  # ============================================================================

  build-release:
    name: üèóÔ∏è Build Release APK
    runs-on: ubuntu-latest
    needs: pre-release-validation

    strategy:
      matrix:
        variant: [release, debug]

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: üìã Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: üéØ Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: üîß Grant Execute Permission to Gradlew
        run: chmod +x gradlew

      - name: üîë Setup Release Keystore
        if: matrix.variant == 'release' && env.KEYSTORE_BASE64 != ''
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > app/release.keystore

      - name: üèóÔ∏è Build ${{ matrix.variant }} APK
        env:
          VERSION_NAME: ${{ needs.pre-release-validation.outputs.version-name }}
          VERSION_CODE: ${{ needs.pre-release-validation.outputs.version-code }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [[ "${{ matrix.variant }}" == "release" ]]; then
            if [[ -f "app/release.keystore" ]]; then
              echo "üîë Building signed release APK..."
              ./gradlew assembleRelease \
                -PversionName="$VERSION_NAME" \
                -PversionCode="$VERSION_CODE" \
                -Pandroid.injected.signing.store.file=release.keystore \
                -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
                -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
                -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
            else
              echo "üèóÔ∏è Building unsigned release APK..."
              ./gradlew assembleRelease \
                -PversionName="$VERSION_NAME" \
                -PversionCode="$VERSION_CODE"
            fi
          else
            echo "üèóÔ∏è Building debug APK..."
            ./gradlew assembleDebug \
              -PversionName="$VERSION_NAME-debug" \
              -PversionCode="$VERSION_CODE"
          fi

      - name: üìä APK Analysis
        run: |
          echo "üìä APK Analysis for ${{ matrix.variant }}:" >> $GITHUB_STEP_SUMMARY

          APK_PATH=$(find app/build/outputs/apk/${{ matrix.variant }} -name "*.apk" | head -1)
          if [[ -n "$APK_PATH" ]]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            APK_SIZE_BYTES=$(du -b "$APK_PATH" | cut -f1)

            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| APK Size | $APK_SIZE |" >> $GITHUB_STEP_SUMMARY
            echo "| APK Size (bytes) | $APK_SIZE_BYTES |" >> $GITHUB_STEP_SUMMARY

            # Extract APK info using aapt
            PACKAGE_NAME=$(aapt dump badging "$APK_PATH" | grep -oP "package: name='\K[^']*")
            MIN_SDK=$(aapt dump badging "$APK_PATH" | grep -oP "sdkVersion:'\K\d+")
            TARGET_SDK=$(aapt dump badging "$APK_PATH" | grep -oP "targetSdkVersion:'\K\d+")

            echo "| Package Name | $PACKAGE_NAME |" >> $GITHUB_STEP_SUMMARY
            echo "| Min SDK | $MIN_SDK |" >> $GITHUB_STEP_SUMMARY
            echo "| Target SDK | $TARGET_SDK |" >> $GITHUB_STEP_SUMMARY

            # Check for signing
            if aapt dump badging "$APK_PATH" | grep -q "application-debuggable"; then
              echo "| Signed | ‚ùå Debug/Unsigned |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Signed | ‚úÖ Release |" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: üèóÔ∏è Build App Bundle (Release only)
        if: matrix.variant == 'release'
        env:
          VERSION_NAME: ${{ needs.pre-release-validation.outputs.version-name }}
          VERSION_CODE: ${{ needs.pre-release-validation.outputs.version-code }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [[ -f "app/release.keystore" ]]; then
            echo "üì¶ Building signed App Bundle..."
            ./gradlew bundleRelease \
              -PversionName="$VERSION_NAME" \
              -PversionCode="$VERSION_CODE" \
              -Pandroid.injected.signing.store.file=release.keystore \
              -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
              -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
              -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
          else
            echo "üì¶ Building unsigned App Bundle..."
            ./gradlew bundleRelease \
              -PversionName="$VERSION_NAME" \
              -PversionCode="$VERSION_CODE"
          fi

      - name: üìÅ Rename Artifacts
        run: |
          VERSION_NAME="${{ needs.pre-release-validation.outputs.version-name }}"

          # Find and rename APK
          APK_PATH=$(find app/build/outputs/apk/${{ matrix.variant }} -name "*.apk" | head -1)
          if [[ -n "$APK_PATH" ]]; then
            APK_DIR=$(dirname "$APK_PATH")
            if [[ "${{ matrix.variant }}" == "release" ]]; then
              NEW_APK_NAME="food-diary-$VERSION_NAME-release.apk"
            else
              NEW_APK_NAME="food-diary-$VERSION_NAME-debug.apk"
            fi
            mv "$APK_PATH" "$APK_DIR/$NEW_APK_NAME"
          fi

          # Rename AAB (release only)
          if [[ "${{ matrix.variant }}" == "release" ]]; then
            AAB_PATH=$(find app/build/outputs/bundle/release -name "*.aab" | head -1)
            if [[ -n "$AAB_PATH" ]]; then
              AAB_DIR=$(dirname "$AAB_PATH")
              NEW_AAB_NAME="food-diary-$VERSION_NAME-release.aab"
              mv "$AAB_PATH" "$AAB_DIR/$NEW_AAB_NAME"
            fi
          fi

      - name: üì± Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.variant }}-${{ needs.pre-release-validation.outputs.version-name }}
          path: app/build/outputs/apk/${{ matrix.variant }}/*.apk
          retention-days: 90

      - name: üì¶ Upload AAB Artifact
        if: matrix.variant == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: aab-release-${{ needs.pre-release-validation.outputs.version-name }}
          path: app/build/outputs/bundle/release/*.aab
          retention-days: 90

  # ============================================================================
  # GENERATE RELEASE NOTES & CHANGELOG
  # ============================================================================

  generate-release-notes:
    name: üìù Generate Release Notes
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-release]

    outputs:
      release-notes: ${{ steps.release-notes.outputs.notes }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìù Generate Release Notes
        id: release-notes
        run: |
          VERSION_NAME="${{ needs.pre-release-validation.outputs.version-name }}"

          # Get previous tag for changelog
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate release notes
          cat << EOF > release_notes.md
          # üçé IBS Food & Symptom Tracking App - $VERSION_NAME

          ## üìã Release Information
          - **Version**: $VERSION_NAME
          - **Build Date**: $(date '+%Y-%m-%d %H:%M UTC')
          - **Minimum Android**: API 24 (Android 7.0)
          - **Target Android**: API 34 (Android 14)

          ## üè• Medical Features
          - **Bristol Stool Chart**: Medically accurate 7-point scale for bowel movement classification
          - **FODMAP Analysis**: Complete ingredient analysis with elimination diet support
          - **Statistical Correlation**: Evidence-based food-symptom pattern identification
          - **Privacy First**: Local-only storage with SQLCipher encryption

          ## üì± App Features
          - **Comprehensive Tracking**: Food intake with multi-ingredient FODMAP analysis
          - **Symptom Monitoring**: Severity scales, duration tracking, body location mapping
          - **Advanced Analytics**: Pattern recognition and correlation analysis
          - **Export Functionality**: Medical-grade PDF reports for healthcare providers

          ## üîí Security & Privacy
          - **Local Storage Only**: No cloud synchronization or data sharing
          - **Encrypted Database**: SQLCipher protection for sensitive health data
          - **HIPAA Considerate**: Privacy-first design principles

          ## üìä Technical Details
          - **Architecture**: Clean Architecture + MVVM pattern
          - **Database**: Room with SQLCipher encryption
          - **UI Framework**: Material Design 3
          - **Testing**: 95%+ test coverage with TDD methodology

          EOF

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "" >> release_notes.md
            echo "## üîÑ Changes Since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md

            # Generate changelog from commits
            git log --pretty=format:"- %s" "$PREVIOUS_TAG..HEAD" | head -20 >> release_notes.md

            if [[ $(git rev-list --count "$PREVIOUS_TAG..HEAD") -gt 20 ]]; then
              echo "" >> release_notes.md
              echo "... and more changes" >> release_notes.md
            fi
          fi

          cat << EOF >> release_notes.md

          ## üì¶ Download Options
          - **APK (Direct Install)**: Download \`food-diary-$VERSION_NAME-release.apk\` for direct installation
          - **App Bundle**: \`food-diary-$VERSION_NAME-release.aab\` for Play Store distribution
          - **Debug Build**: \`food-diary-$VERSION_NAME-debug.apk\` for testing and development

          ## üöÄ Installation Instructions
          1. Download the APK file from the assets below
          2. Enable "Unknown Sources" in Android Settings ‚Üí Security
          3. Install the downloaded APK
          4. Grant necessary permissions for health data tracking

          ## ‚ö†Ô∏è Important Notes
          - This app is for personal health tracking and should not replace professional medical advice
          - All data is stored locally on your device and is not shared with any third parties
          - For optimal experience, ensure your device has Android 7.0 or higher

          ---
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          EOF

          # Save release notes to output
          {
            echo 'notes<<EOF'
            cat release_notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: üìÑ Upload Release Notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ needs.pre-release-validation.outputs.version-name }}
          path: release_notes.md
          retention-days: 90

  # ============================================================================
  # CREATE GITHUB RELEASE
  # ============================================================================

  create-release:
    name: üéâ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-release, generate-release-notes]
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.version_name != ''

    steps:
      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: üìÅ Organize Release Assets
        run: |
          mkdir -p release-assets

          VERSION_NAME="${{ needs.pre-release-validation.outputs.version-name }}"

          # Copy APKs
          find artifacts/ -name "*.apk" -exec cp {} release-assets/ \;

          # Copy AABs
          find artifacts/ -name "*.aab" -exec cp {} release-assets/ \;

          # Copy release notes
          find artifacts/ -name "release_notes.md" -exec cp {} release-assets/ \;

          echo "üì¶ Release Assets:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la release-assets/
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: üìä Generate Asset Checksums
        run: |
          cd release-assets
          sha256sum *.apk *.aab > checksums.sha256
          echo "üîê Asset Checksums:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat checksums.sha256
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: üéâ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.pre-release-validation.outputs.version-name }}
          name: "IBS Food Diary v${{ needs.pre-release-validation.outputs.version-name }}"
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          files: |
            release-assets/*.apk
            release-assets/*.aab
            release-assets/checksums.sha256
          draft: false
          prerelease: ${{ needs.pre-release-validation.outputs.is-pre-release }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üéØ Release Summary
        run: |
          echo "üéâ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ needs.pre-release-validation.outputs.version-name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-release | ${{ needs.pre-release-validation.outputs.is-pre-release }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release URL | https://github.com/${{ github.repository }}/releases/tag/${{ needs.pre-release-validation.outputs.version-name }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì± **Download Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [Release APK](https://github.com/${{ github.repository }}/releases/download/${{ needs.pre-release-validation.outputs.version-name }}/food-diary-${{ needs.pre-release-validation.outputs.version-name }}-release.apk)" >> $GITHUB_STEP_SUMMARY
          echo "- [Debug APK](https://github.com/${{ github.repository }}/releases/download/${{ needs.pre-release-validation.outputs.version-name }}/food-diary-${{ needs.pre-release-validation.outputs.version-name }}-debug.apk)" >> $GITHUB_STEP_SUMMARY