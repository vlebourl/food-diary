package com.fooddiary.di

import com.fooddiary.domain.usecase.*
import com.fooddiary.domain.usecase.impl.*
import dagger.Binds
import dagger.Module
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

// @Module  // Temporarily disabled for CI/CD testing
// @InstallIn(SingletonComponent::class)
abstract class UseCaseModule {

    @Binds
    @Singleton
    abstract fun bindAnalyzeFODMAPUseCase(
        analyzeFODMAPUseCaseImpl: AnalyzeFODMAPUseCaseImpl
    ): AnalyzeFODMAPUseCase

    @Binds
    @Singleton
    abstract fun bindCalculateCorrelationsUseCase(
        calculateCorrelationsUseCaseImpl: CalculateCorrelationsUseCaseImpl
    ): CalculateCorrelationsUseCase

    @Binds
    @Singleton
    abstract fun bindCreateEliminationProtocolUseCase(
        createEliminationProtocolUseCaseImpl: CreateEliminationProtocolUseCaseImpl
    ): CreateEliminationProtocolUseCase

    @Binds
    @Singleton
    abstract fun bindGenerateReportUseCase(
        generateReportUseCaseImpl: GenerateReportUseCaseImpl
    ): GenerateReportUseCase

    @Binds
    @Singleton
    abstract fun bindValidateDataIntegrityUseCase(
        validateDataIntegrityUseCaseImpl: ValidateDataIntegrityUseCaseImpl
    ): ValidateDataIntegrityUseCase

    @Binds
    @Singleton
    abstract fun bindSaveFoodEntryUseCase(
        saveFoodEntryUseCaseImpl: SaveFoodEntryUseCaseImpl
    ): SaveFoodEntryUseCase

    @Binds
    @Singleton
    abstract fun bindSaveSymptomEventUseCase(
        saveSymptomEventUseCaseImpl: SaveSymptomEventUseCaseImpl
    ): SaveSymptomEventUseCase

    @Binds
    @Singleton
    abstract fun bindAnalyzeNutritionUseCase(
        analyzeNutritionUseCaseImpl: AnalyzeNutritionUseCaseImpl
    ): AnalyzeNutritionUseCase

    @Binds
    @Singleton
    abstract fun bindProcessVoiceInputUseCase(
        processVoiceInputUseCaseImpl: ProcessVoiceInputUseCaseImpl
    ): ProcessVoiceInputUseCase

    @Binds
    @Singleton
    abstract fun bindSyncDataUseCase(
        syncDataUseCaseImpl: SyncDataUseCaseImpl
    ): SyncDataUseCase

    @Binds
    @Singleton
    abstract fun bindExportDataUseCase(
        exportDataUseCaseImpl: ExportDataUseCaseImpl
    ): ExportDataUseCase

    @Binds
    @Singleton
    abstract fun bindImportDataUseCase(
        importDataUseCaseImpl: ImportDataUseCaseImpl
    ): ImportDataUseCase

    @Binds
    @Singleton
    abstract fun bindDetectPatternAnomaliesUseCase(
        detectPatternAnomaliesUseCaseImpl: DetectPatternAnomaliesUseCaseImpl
    ): DetectPatternAnomaliesUseCase

    @Binds
    @Singleton
    abstract fun bindGenerateInsightsUseCase(
        generateInsightsUseCaseImpl: GenerateInsightsUseCaseImpl
    ): GenerateInsightsUseCase

    @Binds
    @Singleton
    abstract fun bindValidateSymptomDataUseCase(
        validateSymptomDataUseCaseImpl: ValidateSymptomDataUseCaseImpl
    ): ValidateSymptomDataUseCase

    @Binds
    @Singleton
    abstract fun bindCalculateCorrelationStatisticsUseCase(
        calculateCorrelationStatisticsUseCaseImpl: CalculateCorrelationStatisticsUseCaseImpl
    ): CalculateCorrelationStatisticsUseCase
}