// Generated by Dagger (https://dagger.dev).
package com.fooddiary.presentation.viewmodel;

import com.fooddiary.domain.usecase.AddFoodEntryUseCase;
import com.fooddiary.domain.usecase.AnalyzeFODMAPContentUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class FoodEntryViewModel_Factory implements Factory<FoodEntryViewModel> {
  private final Provider<AddFoodEntryUseCase> addFoodEntryUseCaseProvider;

  private final Provider<AnalyzeFODMAPContentUseCase> analyzeFODMAPContentUseCaseProvider;

  private final Provider<NonExistentClass> foodEntryRepositoryProvider;

  public FoodEntryViewModel_Factory(Provider<AddFoodEntryUseCase> addFoodEntryUseCaseProvider,
      Provider<AnalyzeFODMAPContentUseCase> analyzeFODMAPContentUseCaseProvider,
      Provider<NonExistentClass> foodEntryRepositoryProvider) {
    this.addFoodEntryUseCaseProvider = addFoodEntryUseCaseProvider;
    this.analyzeFODMAPContentUseCaseProvider = analyzeFODMAPContentUseCaseProvider;
    this.foodEntryRepositoryProvider = foodEntryRepositoryProvider;
  }

  @Override
  public FoodEntryViewModel get() {
    return newInstance(addFoodEntryUseCaseProvider.get(), analyzeFODMAPContentUseCaseProvider.get(), foodEntryRepositoryProvider.get());
  }

  public static FoodEntryViewModel_Factory create(
      Provider<AddFoodEntryUseCase> addFoodEntryUseCaseProvider,
      Provider<AnalyzeFODMAPContentUseCase> analyzeFODMAPContentUseCaseProvider,
      Provider<NonExistentClass> foodEntryRepositoryProvider) {
    return new FoodEntryViewModel_Factory(addFoodEntryUseCaseProvider, analyzeFODMAPContentUseCaseProvider, foodEntryRepositoryProvider);
  }

  public static FoodEntryViewModel newInstance(AddFoodEntryUseCase addFoodEntryUseCase,
      AnalyzeFODMAPContentUseCase analyzeFODMAPContentUseCase,
      NonExistentClass foodEntryRepository) {
    return new FoodEntryViewModel(addFoodEntryUseCase, analyzeFODMAPContentUseCase, foodEntryRepository);
  }
}
