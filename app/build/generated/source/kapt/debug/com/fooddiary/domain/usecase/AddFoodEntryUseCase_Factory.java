// Generated by Dagger (https://dagger.dev).
package com.fooddiary.domain.usecase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AddFoodEntryUseCase_Factory implements Factory<AddFoodEntryUseCase> {
  private final Provider<NonExistentClass> foodEntryRepositoryProvider;

  private final Provider<NonExistentClass> fodmapRepositoryProvider;

  public AddFoodEntryUseCase_Factory(Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<NonExistentClass> fodmapRepositoryProvider) {
    this.foodEntryRepositoryProvider = foodEntryRepositoryProvider;
    this.fodmapRepositoryProvider = fodmapRepositoryProvider;
  }

  @Override
  public AddFoodEntryUseCase get() {
    return newInstance(foodEntryRepositoryProvider.get(), fodmapRepositoryProvider.get());
  }

  public static AddFoodEntryUseCase_Factory create(
      Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<NonExistentClass> fodmapRepositoryProvider) {
    return new AddFoodEntryUseCase_Factory(foodEntryRepositoryProvider, fodmapRepositoryProvider);
  }

  public static AddFoodEntryUseCase newInstance(NonExistentClass foodEntryRepository,
      NonExistentClass fodmapRepository) {
    return new AddFoodEntryUseCase(foodEntryRepository, fodmapRepository);
  }
}
