// Generated by Dagger (https://dagger.dev).
package com.fooddiary.data.integrity;

import com.fooddiary.data.database.dao.FoodEntryDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DataIntegrityChecker_Factory implements Factory<DataIntegrityChecker> {
  private final Provider<FoodEntryDao> foodEntryDaoProvider;

  private final Provider<NonExistentClass> symptomDaoProvider;

  public DataIntegrityChecker_Factory(Provider<FoodEntryDao> foodEntryDaoProvider,
      Provider<NonExistentClass> symptomDaoProvider) {
    this.foodEntryDaoProvider = foodEntryDaoProvider;
    this.symptomDaoProvider = symptomDaoProvider;
  }

  @Override
  public DataIntegrityChecker get() {
    return newInstance(foodEntryDaoProvider.get(), symptomDaoProvider.get());
  }

  public static DataIntegrityChecker_Factory create(Provider<FoodEntryDao> foodEntryDaoProvider,
      Provider<NonExistentClass> symptomDaoProvider) {
    return new DataIntegrityChecker_Factory(foodEntryDaoProvider, symptomDaoProvider);
  }

  public static DataIntegrityChecker newInstance(FoodEntryDao foodEntryDao,
      NonExistentClass symptomDao) {
    return new DataIntegrityChecker(foodEntryDao, symptomDao);
  }
}
