// Generated by Dagger (https://dagger.dev).
package com.fooddiary.domain.usecase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AddSymptomEventUseCase_Factory implements Factory<AddSymptomEventUseCase> {
  private final Provider<NonExistentClass> symptomEventRepositoryProvider;

  public AddSymptomEventUseCase_Factory(Provider<NonExistentClass> symptomEventRepositoryProvider) {
    this.symptomEventRepositoryProvider = symptomEventRepositoryProvider;
  }

  @Override
  public AddSymptomEventUseCase get() {
    return newInstance(symptomEventRepositoryProvider.get());
  }

  public static AddSymptomEventUseCase_Factory create(
      Provider<NonExistentClass> symptomEventRepositoryProvider) {
    return new AddSymptomEventUseCase_Factory(symptomEventRepositoryProvider);
  }

  public static AddSymptomEventUseCase newInstance(NonExistentClass symptomEventRepository) {
    return new AddSymptomEventUseCase(symptomEventRepository);
  }
}
