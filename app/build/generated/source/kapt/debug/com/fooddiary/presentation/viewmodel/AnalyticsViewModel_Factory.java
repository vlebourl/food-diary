// Generated by Dagger (https://dagger.dev).
package com.fooddiary.presentation.viewmodel;

import com.fooddiary.domain.usecase.CalculateCorrelationsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AnalyticsViewModel_Factory implements Factory<AnalyticsViewModel> {
  private final Provider<NonExistentClass> triggerPatternRepositoryProvider;

  private final Provider<NonExistentClass> symptomEventRepositoryProvider;

  private final Provider<NonExistentClass> foodEntryRepositoryProvider;

  private final Provider<CalculateCorrelationsUseCase> calculateCorrelationsUseCaseProvider;

  public AnalyticsViewModel_Factory(Provider<NonExistentClass> triggerPatternRepositoryProvider,
      Provider<NonExistentClass> symptomEventRepositoryProvider,
      Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<CalculateCorrelationsUseCase> calculateCorrelationsUseCaseProvider) {
    this.triggerPatternRepositoryProvider = triggerPatternRepositoryProvider;
    this.symptomEventRepositoryProvider = symptomEventRepositoryProvider;
    this.foodEntryRepositoryProvider = foodEntryRepositoryProvider;
    this.calculateCorrelationsUseCaseProvider = calculateCorrelationsUseCaseProvider;
  }

  @Override
  public AnalyticsViewModel get() {
    return newInstance(triggerPatternRepositoryProvider.get(), symptomEventRepositoryProvider.get(), foodEntryRepositoryProvider.get(), calculateCorrelationsUseCaseProvider.get());
  }

  public static AnalyticsViewModel_Factory create(
      Provider<NonExistentClass> triggerPatternRepositoryProvider,
      Provider<NonExistentClass> symptomEventRepositoryProvider,
      Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<CalculateCorrelationsUseCase> calculateCorrelationsUseCaseProvider) {
    return new AnalyticsViewModel_Factory(triggerPatternRepositoryProvider, symptomEventRepositoryProvider, foodEntryRepositoryProvider, calculateCorrelationsUseCaseProvider);
  }

  public static AnalyticsViewModel newInstance(NonExistentClass triggerPatternRepository,
      NonExistentClass symptomEventRepository, NonExistentClass foodEntryRepository,
      CalculateCorrelationsUseCase calculateCorrelationsUseCase) {
    return new AnalyticsViewModel(triggerPatternRepository, symptomEventRepository, foodEntryRepository, calculateCorrelationsUseCase);
  }
}
