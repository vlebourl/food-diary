// Generated by Dagger (https://dagger.dev).
package com.fooddiary.domain.usecase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class CalculateCorrelationsUseCase_Factory implements Factory<CalculateCorrelationsUseCase> {
  private final Provider<NonExistentClass> foodEntryRepositoryProvider;

  private final Provider<NonExistentClass> symptomEventRepositoryProvider;

  private final Provider<NonExistentClass> triggerPatternRepositoryProvider;

  public CalculateCorrelationsUseCase_Factory(
      Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<NonExistentClass> symptomEventRepositoryProvider,
      Provider<NonExistentClass> triggerPatternRepositoryProvider) {
    this.foodEntryRepositoryProvider = foodEntryRepositoryProvider;
    this.symptomEventRepositoryProvider = symptomEventRepositoryProvider;
    this.triggerPatternRepositoryProvider = triggerPatternRepositoryProvider;
  }

  @Override
  public CalculateCorrelationsUseCase get() {
    return newInstance(foodEntryRepositoryProvider.get(), symptomEventRepositoryProvider.get(), triggerPatternRepositoryProvider.get());
  }

  public static CalculateCorrelationsUseCase_Factory create(
      Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<NonExistentClass> symptomEventRepositoryProvider,
      Provider<NonExistentClass> triggerPatternRepositoryProvider) {
    return new CalculateCorrelationsUseCase_Factory(foodEntryRepositoryProvider, symptomEventRepositoryProvider, triggerPatternRepositoryProvider);
  }

  public static CalculateCorrelationsUseCase newInstance(NonExistentClass foodEntryRepository,
      NonExistentClass symptomEventRepository, NonExistentClass triggerPatternRepository) {
    return new CalculateCorrelationsUseCase(foodEntryRepository, symptomEventRepository, triggerPatternRepository);
  }
}
