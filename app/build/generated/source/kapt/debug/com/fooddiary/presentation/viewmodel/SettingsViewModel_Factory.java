// Generated by Dagger (https://dagger.dev).
package com.fooddiary.presentation.viewmodel;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SettingsViewModel_Factory implements Factory<SettingsViewModel> {
  private final Provider<NonExistentClass> userPreferencesProvider;

  private final Provider<NonExistentClass> databaseRepositoryProvider;

  public SettingsViewModel_Factory(Provider<NonExistentClass> userPreferencesProvider,
      Provider<NonExistentClass> databaseRepositoryProvider) {
    this.userPreferencesProvider = userPreferencesProvider;
    this.databaseRepositoryProvider = databaseRepositoryProvider;
  }

  @Override
  public SettingsViewModel get() {
    return newInstance(userPreferencesProvider.get(), databaseRepositoryProvider.get());
  }

  public static SettingsViewModel_Factory create(Provider<NonExistentClass> userPreferencesProvider,
      Provider<NonExistentClass> databaseRepositoryProvider) {
    return new SettingsViewModel_Factory(userPreferencesProvider, databaseRepositoryProvider);
  }

  public static SettingsViewModel newInstance(NonExistentClass userPreferences,
      NonExistentClass databaseRepository) {
    return new SettingsViewModel(userPreferences, databaseRepository);
  }
}
