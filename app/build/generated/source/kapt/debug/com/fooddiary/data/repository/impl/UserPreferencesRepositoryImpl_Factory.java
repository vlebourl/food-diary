// Generated by Dagger (https://dagger.dev).
package com.fooddiary.data.repository.impl;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UserPreferencesRepositoryImpl_Factory implements Factory<UserPreferencesRepositoryImpl> {
  private final Provider<NonExistentClass> userPreferencesProvider;

  public UserPreferencesRepositoryImpl_Factory(Provider<NonExistentClass> userPreferencesProvider) {
    this.userPreferencesProvider = userPreferencesProvider;
  }

  @Override
  public UserPreferencesRepositoryImpl get() {
    return newInstance(userPreferencesProvider.get());
  }

  public static UserPreferencesRepositoryImpl_Factory create(
      Provider<NonExistentClass> userPreferencesProvider) {
    return new UserPreferencesRepositoryImpl_Factory(userPreferencesProvider);
  }

  public static UserPreferencesRepositoryImpl newInstance(NonExistentClass userPreferences) {
    return new UserPreferencesRepositoryImpl(userPreferences);
  }
}
