// Generated by Dagger (https://dagger.dev).
package com.fooddiary.presentation.viewmodel;

import com.fooddiary.domain.usecase.GenerateReportUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ReportsViewModel_Factory implements Factory<ReportsViewModel> {
  private final Provider<NonExistentClass> triggerPatternRepositoryProvider;

  private final Provider<NonExistentClass> symptomEventRepositoryProvider;

  private final Provider<NonExistentClass> foodEntryRepositoryProvider;

  private final Provider<GenerateReportUseCase> generateReportUseCaseProvider;

  public ReportsViewModel_Factory(Provider<NonExistentClass> triggerPatternRepositoryProvider,
      Provider<NonExistentClass> symptomEventRepositoryProvider,
      Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<GenerateReportUseCase> generateReportUseCaseProvider) {
    this.triggerPatternRepositoryProvider = triggerPatternRepositoryProvider;
    this.symptomEventRepositoryProvider = symptomEventRepositoryProvider;
    this.foodEntryRepositoryProvider = foodEntryRepositoryProvider;
    this.generateReportUseCaseProvider = generateReportUseCaseProvider;
  }

  @Override
  public ReportsViewModel get() {
    return newInstance(triggerPatternRepositoryProvider.get(), symptomEventRepositoryProvider.get(), foodEntryRepositoryProvider.get(), generateReportUseCaseProvider.get());
  }

  public static ReportsViewModel_Factory create(
      Provider<NonExistentClass> triggerPatternRepositoryProvider,
      Provider<NonExistentClass> symptomEventRepositoryProvider,
      Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<GenerateReportUseCase> generateReportUseCaseProvider) {
    return new ReportsViewModel_Factory(triggerPatternRepositoryProvider, symptomEventRepositoryProvider, foodEntryRepositoryProvider, generateReportUseCaseProvider);
  }

  public static ReportsViewModel newInstance(NonExistentClass triggerPatternRepository,
      NonExistentClass symptomEventRepository, NonExistentClass foodEntryRepository,
      GenerateReportUseCase generateReportUseCase) {
    return new ReportsViewModel(triggerPatternRepository, symptomEventRepository, foodEntryRepository, generateReportUseCase);
  }
}
