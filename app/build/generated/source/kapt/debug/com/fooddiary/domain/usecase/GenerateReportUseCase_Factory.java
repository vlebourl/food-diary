// Generated by Dagger (https://dagger.dev).
package com.fooddiary.domain.usecase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GenerateReportUseCase_Factory implements Factory<GenerateReportUseCase> {
  private final Provider<NonExistentClass> foodEntryRepositoryProvider;

  private final Provider<NonExistentClass> symptomEventRepositoryProvider;

  private final Provider<NonExistentClass> triggerPatternRepositoryProvider;

  private final Provider<NonExistentClass> environmentalContextRepositoryProvider;

  private final Provider<NonExistentClass> medicalReportRepositoryProvider;

  public GenerateReportUseCase_Factory(Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<NonExistentClass> symptomEventRepositoryProvider,
      Provider<NonExistentClass> triggerPatternRepositoryProvider,
      Provider<NonExistentClass> environmentalContextRepositoryProvider,
      Provider<NonExistentClass> medicalReportRepositoryProvider) {
    this.foodEntryRepositoryProvider = foodEntryRepositoryProvider;
    this.symptomEventRepositoryProvider = symptomEventRepositoryProvider;
    this.triggerPatternRepositoryProvider = triggerPatternRepositoryProvider;
    this.environmentalContextRepositoryProvider = environmentalContextRepositoryProvider;
    this.medicalReportRepositoryProvider = medicalReportRepositoryProvider;
  }

  @Override
  public GenerateReportUseCase get() {
    return newInstance(foodEntryRepositoryProvider.get(), symptomEventRepositoryProvider.get(), triggerPatternRepositoryProvider.get(), environmentalContextRepositoryProvider.get(), medicalReportRepositoryProvider.get());
  }

  public static GenerateReportUseCase_Factory create(
      Provider<NonExistentClass> foodEntryRepositoryProvider,
      Provider<NonExistentClass> symptomEventRepositoryProvider,
      Provider<NonExistentClass> triggerPatternRepositoryProvider,
      Provider<NonExistentClass> environmentalContextRepositoryProvider,
      Provider<NonExistentClass> medicalReportRepositoryProvider) {
    return new GenerateReportUseCase_Factory(foodEntryRepositoryProvider, symptomEventRepositoryProvider, triggerPatternRepositoryProvider, environmentalContextRepositoryProvider, medicalReportRepositoryProvider);
  }

  public static GenerateReportUseCase newInstance(NonExistentClass foodEntryRepository,
      NonExistentClass symptomEventRepository, NonExistentClass triggerPatternRepository,
      NonExistentClass environmentalContextRepository, NonExistentClass medicalReportRepository) {
    return new GenerateReportUseCase(foodEntryRepository, symptomEventRepository, triggerPatternRepository, environmentalContextRepository, medicalReportRepository);
  }
}
