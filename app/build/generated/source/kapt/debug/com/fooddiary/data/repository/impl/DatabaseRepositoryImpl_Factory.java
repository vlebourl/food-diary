// Generated by Dagger (https://dagger.dev).
package com.fooddiary.data.repository.impl;

import android.content.Context;
import com.fooddiary.data.database.FoodDiaryDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DatabaseRepositoryImpl_Factory implements Factory<DatabaseRepositoryImpl> {
  private final Provider<Context> contextProvider;

  private final Provider<FoodDiaryDatabase> databaseProvider;

  public DatabaseRepositoryImpl_Factory(Provider<Context> contextProvider,
      Provider<FoodDiaryDatabase> databaseProvider) {
    this.contextProvider = contextProvider;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public DatabaseRepositoryImpl get() {
    return newInstance(contextProvider.get(), databaseProvider.get());
  }

  public static DatabaseRepositoryImpl_Factory create(Provider<Context> contextProvider,
      Provider<FoodDiaryDatabase> databaseProvider) {
    return new DatabaseRepositoryImpl_Factory(contextProvider, databaseProvider);
  }

  public static DatabaseRepositoryImpl newInstance(Context context, FoodDiaryDatabase database) {
    return new DatabaseRepositoryImpl(context, database);
  }
}
