// Generated by Dagger (https://dagger.dev).
package com.fooddiary.domain.usecase;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import error.NonExistentClass;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AnalyzeFODMAPContentUseCase_Factory implements Factory<AnalyzeFODMAPContentUseCase> {
  private final Provider<NonExistentClass> fodmapRepositoryProvider;

  public AnalyzeFODMAPContentUseCase_Factory(Provider<NonExistentClass> fodmapRepositoryProvider) {
    this.fodmapRepositoryProvider = fodmapRepositoryProvider;
  }

  @Override
  public AnalyzeFODMAPContentUseCase get() {
    return newInstance(fodmapRepositoryProvider.get());
  }

  public static AnalyzeFODMAPContentUseCase_Factory create(
      Provider<NonExistentClass> fodmapRepositoryProvider) {
    return new AnalyzeFODMAPContentUseCase_Factory(fodmapRepositoryProvider);
  }

  public static AnalyzeFODMAPContentUseCase newInstance(NonExistentClass fodmapRepository) {
    return new AnalyzeFODMAPContentUseCase(fodmapRepository);
  }
}
